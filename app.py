import streamlit as st  # üìö Streamlit for UI
from pypdf import PdfReader        # üìö Extract text from PDFs

# ------------------------------------------------------------
# üìÑ PDF ‚Üí Q&A Bot (Enhanced UI v1)
# ------------------------------------------------------------
# Day‚Äë2 of Week‚Äë1
# This revision applies CRO feedback:
#   ‚Ä¢ Clear hero headline + benefit copy
#   ‚Ä¢ Trust/privacy messaging (local processing)
#   ‚Ä¢ Friendlier uploader micro‚Äëcopy
#   ‚Ä¢ Success toast with page count
#   ‚Ä¢ Question box visible but disabled until a PDF is present
#   ‚Ä¢ Spinner during PDF parsing
#   ‚Ä¢ All backend calls still stubbed for tomorrow
# ------------------------------------------------------------

# üñ•Ô∏è Basic page‚Äëlevel config
st.set_page_config(
    page_title="üìÑ Ask Your PDF",   # Title in browser tab
    page_icon="üìÑ",                # Favicon emoji
    layout="centered"              # Keep content narrow & centered
)

# üè∑Ô∏è Hero section -------------------------------------------------------
st.header("Ask Questions About Any PDF ‚Äî Instantly")
st.caption(
    "Drop a white‚Äëpaper, contract, or textbook and get concise answers. "
    "All processing happens **locally** on your device ‚Äî files never leave your computer."
)

st.markdown("---")  # Visual divider

# 1Ô∏è‚É£ PDF upload widget -----------------------------------------------
uploaded_file = st.file_uploader(
    "1Ô∏è‚É£ Drag & drop or click to select a PDF (max 200‚ÄØMB)",  # Label with step indicator
    type=["pdf"],                                              # Accept only PDFs
    help="Your file is processed entirely in‚Äëbrowser / on‚Äëdevice."  # Tooltip / privacy note
)

# 2Ô∏è‚É£ If a file exists, extract text & preview -------------------------
if uploaded_file:
    # Show spinner while reading pages
    with st.spinner("Reading PDF‚Ä¶"):
        reader = PdfReader(uploaded_file)
        raw_text = "\n".join(page.extract_text() or "" for page in reader.pages)

    # Instant success feedback
    st.success(f"Loaded **{uploaded_file.name}** ‚Äî {len(reader.pages)} pages ‚úÖ", icon="üìÑ")

    # Preview the first 500 chars so user knows it worked
    st.subheader("üìë Document Preview (first 500 characters)")
    st.text_area(
        label="",  # No label inside textarea
        value=raw_text[:500] + (" ‚Ä¶" if len(raw_text) > 500 else ""),
        height=200
    )

    st.markdown("---")

# 3Ô∏è‚É£ Question input ----------------------------------------------------
question = st.text_input(
    "2Ô∏è‚É£ Ask a question about your PDF",                      # Prompt label
    disabled=uploaded_file is None,                          # Enabled only after PDF upload
    placeholder="e.g., Summarize section¬†3 (enabled after upload)"
)

# 4Ô∏è‚É£ CTA button --------------------------------------------------------
if st.button("Get Answer", disabled=uploaded_file is None or not question.strip()):
    # Placeholder for tomorrow‚Äôs Retrieval‚ÄëQA pipeline
    st.info("üöß Backend not connected yet ‚Äî we'll wire this up tomorrow!")

# 5Ô∏è‚É£ Gentle nudge when no file is present -----------------------------
if uploaded_file is None:
    st.info("‚¨ÜÔ∏è Upload a PDF above to enable questions.", icon="‚ÑπÔ∏è")
